- name: ensure jq is installed
  apt:
    name: jq
    state: latest

- name: Check if zerotier exists
  command: which zerotier-cli
  register: command_check
  ignore_errors: yes

- name: download install script
  get_url:
    url: https://install.zerotier.com
    dest: ~/install-zerotier.sh
  when: command_check.rc != 0

- name: run install script
  become: true
  ansible.builtin.shell: ~/install-zerotier.sh
  args:
    executable: /bin/bash
  when: command_check.rc != 0

- name: delete install script
  ansible.builtin.file:
    path: ~/install-zerotier.sh
    state: absent

- name: check if client is connected to any networks
  shell: zerotier-cli listnetworks -j | jq length
  register: zerotier_network_count

- name: find zerotier network
  when: zerotier_network_count.stdout | int == 0
  shell: >
    curl -s -H "Authorization: token {{ zerotier_token }}" https://api.zerotier.com/api/v1/network | jq -r '.[0].id'
  register: zerotier_network

- name: get zerotier address
  when: zerotier_network_count.stdout | int == 0
  shell: zerotier-cli info -j | jq -r '.address'
  register: zerotier_address

- name: debug
  debug:
    var: zerotier_network_count

- name: join network
  when: zerotier_network_count.stdout | int == 0
  command: zerotier-cli join {{ zerotier_network.stdout }}

- name: authorize join
  when: zerotier_network_count.stdout | int == 0
  command: >
    curl -H "Authorization: token {{ zerotier_token }}" -X POST \
      "https://api.zerotier.com/api/v1/network/{{ zerotier_network.stdout }}/member/{{ zerotier_address.stdout }}" \
      --data '{"config": {"authorized": true}}'

- name: get zerotier subnet
  shell: zerotier-cli listnetworks -j | jq -r '.[0].routes[0].target'
  register: zerotier_subnet

- name: Allow ZeroTier port in UFW
  ufw:
    rule: allow
    port: '9993'
    proto: udp

- name: Allow http and https traffic
  loop:
    - 80
    - 443
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
    from: "{{ zerotier_subnet.stdout }}"

- name: Set UFW default forward policy to ACCEPT
  lineinfile:
    path: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY'
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'

- name: Enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: Configure NAT in UFW
  blockinfile:
    path: /etc/ufw/before.rules
    insertbefore: '^\*filter'
    marker: "# {mark} ANSIBLE MANAGED BLOCK - NAT configuration"
    block: |
      *nat
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s {{ zerotier_subnet.stdout }} -o {{ default_network_interface }} -j MASQUERADE
      COMMIT

- name: Restart UFW
  ufw:
    state: reloaded


